{"version":3,"sources":["webpack:///./src/views/TreeView/TreeCheckboxView/index.less?65bd","webpack:///./src/views/TreeView/TreeSingleView/index.less?fc75","webpack:///./src/views/TreeView/TreeBasicView/index.less?5666","webpack:///./src/views/TreeView/TreeLoadView/index.less?77af","views/TreeView/TreeCheckboxView/index.tsx","views/TreeView/TreeSingleView/index.tsx","views/TreeView/TreeBasicView/index.tsx","views/TreeView/TreeLoadView/index.tsx","views/TreeView/index.tsx","webpack:///./src/views/TreeView/TreeBasicView/index.tsx?d9df","views/TreeView/TreeBasicView/index.less","webpack:///./src/views/TreeView/TreeSingleView/index.tsx?743f","views/TreeView/TreeSingleView/index.less","webpack:///./src/views/TreeView/TreeCheckboxView/index.tsx?cd75","views/TreeView/TreeCheckboxView/index.less","webpack:///./src/views/TreeView/TreeLoadView/index.tsx?609f","views/TreeView/TreeLoadView/index.less","component/Icon/Fold.tsx","component/Icon/Start.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","component/Icon/Left.tsx","component/Tree/index.tsx","component/Radio/index.tsx","component/Radio/index.less","component/Tree/index.less"],"names":["module","exports","data","id","array","undefined","options","key","content","className","styles","radio","TreeCheckboxView","useState","checkedItems","setCheckedItems","setKey","Radio","selectedKey","onSelect","container","row","Tree","isMulti","type","nodeProps","item","children","isChecked","some","i","renderNode","value","icon","Fold","folder","star","onCheck","map","TreeSingleView","TreeBasicView","getData","mockData","TreeLoadView","loadedKeys","setLoadedKeys","setData","isLoaded","includes","onLoad","setTimeout","node","cb","task","length","pop","concat","traveData","n","old","TreeView","Text","level","style","margin","Demo","title","demo","codes","name","code","PropsTable","desc","list","defValue","join","props","viewBox","width","height","d","Star","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","Left","travel","child","next","travelParent","parent","getParentSelect","fn","getLeafSelect","canExpand","lastRootNodeRef","useRef","setList","rootNode","useMemo","createNode","nodeData","lastNode","isDisabled","isExpand","isIndeterminate","loading","cNode","lastCNode","checkedChildCount","thisNode","lastCurrent","current","root","createList","result","push","useEffect","List","render","index","placeholder","toggleExpand","e","stopPropagation","toggleCheck","checked","checkedNode","allParent","res","handleCheck","classNames","onClick","paddingLeft","iconContainer","Loading","expandIcon","rotate","checkbox","CheckBox","listContainer","vertical","active","disable","disabled","inputRadio","defaultChecked","circle"],"mappings":"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","file":"static/js/23.0e8ee18d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"star\":\"index_star_75a4f\",\"container\":\"index_container_fd55e\",\"row\":\"index_row_a70bb\",\"radio\":\"index_radio_aff7e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"star\":\"index_star_e4168\",\"container\":\"index_container_d9876\",\"row\":\"index_row_1e0de\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"star\":\"index_star_23549\",\"container\":\"index_container_fd1bc\",\"row\":\"index_row_fd5d8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"star\":\"index_star_8ad96\",\"container\":\"index_container_bcddd\",\"row\":\"index_row_b225d\",\"radio\":\"index_radio_94502\"};","import Fold from \"component/Icon/Fold\";\nimport Star from \"component/Icon/Start\";\nimport Radio from \"component/Radio\";\nimport Tree from \"component/Tree\"\nimport { ReactChild, ReactFragment, ReactPortal, useState } from \"react\";\nimport styles from './index.less'\nconst data = [\n    {\n        id: '1-0',\n        array: [\n            {\n                id: '1-0-1',\n                array: [\n                    {\n                        id: '1-0-1-1',\n                        array: undefined,\n                    },\n                ],\n            },\n            {\n                id: '1-0-2',\n                array: undefined,\n            },\n            {\n                id: '1-0-3',\n                array: undefined,\n            },\n        ],\n\n    },\n\n    {\n        id: '1-1',\n        array: [\n            {\n                id: '1-1-1',\n                array: [\n                    {\n                        id: '1-1-1-1',\n                        array: undefined,\n                    },\n                ],\n            },\n            {\n                id: '1-1-2',\n                array: undefined,\n            },\n            {\n                id: '1-1-3',\n                array: undefined,\n            },\n        ],\n\n    },\n\n    {\n        id: '1-2',\n        array: [\n            {\n                id: '1-2-1',\n                array: [\n                    {\n                        id: '1-2-1-1',\n                        array: undefined,\n                    },\n                ],\n            },\n            {\n                id: '1-2-2',\n                array: undefined,\n            },\n            {\n                id: '1-2-3',\n                array: undefined,\n            },\n        ],\n\n    },\n];\n\nconst options = [\n    { key: 'leaf', content: '只选择叶子节点', className: styles.radio },\n    { key: 'parent', content: '合并选项', className: styles.radio },\n    \n]\nconst TreeCheckboxView = () => {\n    const [checkedItems, setCheckedItems] = useState([]);\n    const [key,setKey] = useState('leaf');\n    \n    const nodeProps = ((item: any) => ({\n        key: item.id,\n        children: item.array,\n        isChecked: checkedItems.some((i: any) => i.id === item.id),\n    }));\n    return (\n        <div>\n            <div className={styles.radio}>\n                <Radio\n                    options={options}\n                    selectedKey={key}\n                    onSelect={(selectedKey:string) => {\n                        setKey(selectedKey)\n                        setCheckedItems([])\n                    }}\n                />\n            </div>\n            <div className={styles.container}>\n                <div className={styles.row}>\n                    <Tree\n                        data={data}\n                        isMulti={true}\n                        type={key}\n                        nodeProps={nodeProps}\n                        renderNode={(item: { value: { id: boolean | ReactChild | ReactFragment | ReactPortal | null | undefined; array: any; }; }) => ({\n                            content: <span className={styles.content}>{item.value.id}</span>,\n                            icon: item.value.array ? <Fold className={styles.folder} /> : <Star className={styles.star} />,\n                        })}\n                        onCheck={setCheckedItems}\n                    />\n                </div>\n                <div className={styles.row}>\n                    <p>已选节点：</p>\n                    {checkedItems.map((item: any) => <p key={item.id}>{item.id}</p>)}\n                </div>\n\n            </div>\n        </div>\n    )\n\n\n}\n\nexport default TreeCheckboxView;","import Fold from \"component/Icon/Fold\";\nimport Star from \"component/Icon/Start\";\nimport Tree from \"component/Tree\"\nimport { ReactChild, ReactFragment, ReactPortal, useState } from \"react\";\nimport styles from './index.less'\nconst data = [\n    {\n        id: '1-0',\n        array: [\n            {\n                id: '1-0-1',\n                array: [\n                    {\n                        id: '1-0-1-1',\n                        array: undefined,\n                    },\n                ],\n            },\n            {\n                id: '1-0-2',\n                array: undefined,\n            },\n            {\n                id: '1-0-3',\n                array: undefined,\n            },\n        ],\n\n    },\n\n    {\n        id: '1-1',\n        array: [\n            {\n                id: '1-1-1',\n                array: [\n                    {\n                        id: '1-1-1-1',\n                        array: undefined,\n                    },\n                ],\n            },\n            {\n                id: '1-1-2',\n                array: undefined,\n            },\n            {\n                id: '1-1-3',\n                array: undefined,\n            },\n        ],\n\n    },\n\n    {\n        id: '1-2',\n        array: [\n            {\n                id: '1-2-1',\n                array: [\n                    {\n                        id: '1-2-1-1',\n                        array: undefined,\n                    },\n                ],\n            },\n            {\n                id: '1-2-2',\n                array: undefined,\n            },\n            {\n                id: '1-2-3',\n                array: undefined,\n            },\n        ],\n\n    },\n];\nconst TreeSingleView = () => {\n    const [checkedItems, setCheckedItems] = useState([]);\n    const nodeProps = ((item: any) => ({\n        key: item.id,\n        children: item.array,\n        isChecked: checkedItems.some((i: any) => i.id === item.id),\n    }));\n    // console.log(checkedItems,'checkedItems');\n    \n    return (\n        <div className={styles.container}>\n            <div className={styles.row}>\n                <Tree\n                    data={data}\n                    isMulti={false}\n                    nodeProps={nodeProps}\n                    renderNode={(item: { value: { id: boolean | ReactChild | ReactFragment | ReactPortal | null | undefined; array: any; }; }) => ({\n                        content: <span className={styles.content}>{item.value.id}</span>,\n                        icon: item.value.array ? <Fold className={styles.folder} /> : <Star className={styles.star} />,\n                    })}\n                    onCheck={setCheckedItems}\n                />\n            </div>\n            <div className={styles.row}>\n                <p>已选节点：</p>\n                {checkedItems.map((item: any) => <p key={item.id}>{item.id}</p>)}\n            </div>\n\n        </div>\n    )\n\n\n}\n\nexport default TreeSingleView;","import Fold from \"component/Icon/Fold\";\nimport Star from \"component/Icon/Start\";\nimport Tree from \"component/Tree\"\nimport { ReactChild, ReactFragment, ReactPortal } from \"react\";\nimport styles from './index.less'\nconst data = [\n    {\n        id: '1-0',\n        array: [\n            {\n                id: '1-0-1',\n                array: [\n                    {\n                        id: '1-0-1-1',\n                        array: undefined,\n                    },\n                ],\n            },\n            {\n                id: '1-0-2',\n                array: undefined,\n            },\n            {\n                id: '1-0-3',\n                array: undefined,\n            },\n        ],\n\n    },\n\n    {\n        id: '1-1',\n        array: [\n            {\n                id: '1-1-1',\n                array: [\n                    {\n                        id: '1-1-1-1',\n                        array: undefined,\n                    },\n                ],\n            },\n            {\n                id: '1-1-2',\n                array: undefined,\n            },\n            {\n                id: '1-1-3',\n                array: undefined,\n            },\n        ],\n\n    },\n\n    {\n        id: '1-2',\n        array: [\n            {\n                id: '1-2-1',\n                array: [\n                    {\n                        id: '1-2-1-1',\n                        array: undefined,\n                    },\n                ],\n            },\n            {\n                id: '1-2-2',\n                array: undefined,\n            },\n            {\n                id: '1-2-3',\n                array: undefined,\n            },\n        ],\n\n    },\n];\nconst TreeBasicView = () => {\n\n    const nodeProps = ((item: any) => ({\n        key: item.id,\n        children: item.array,\n        // isChecked: [].some((i: any) => i.id === item.id),\n    }));\n    return (\n        <div className={styles.container}>\n            <div className={styles.row}>\n            <Tree\n                data={data}\n                isMulti={true}\n                nodeProps={nodeProps}\n                renderNode={(item: { value: { id: boolean | ReactChild | ReactFragment | ReactPortal | null | undefined; array: any; }; }) => ({\n                    content: <span className={styles.content}>{item.value.id}</span>,\n                    icon: item.value.array ? <Fold className={styles.folder} /> : <Star className={styles.star} />,\n                })}\n            />\n            </div>\n            <div className={styles.row}>\n            <Tree\n                data={data}\n                isMulti={false}\n                nodeProps={nodeProps}\n                renderNode={(item: { value: { id: boolean | ReactChild | ReactFragment | ReactPortal | null | undefined; array: any; }; }) => ({\n                    content: <span className={styles.content}>{item.value.id}</span>,\n                })}\n            />\n            </div>\n            \n        </div>\n    )\n\n\n}\n\nexport default TreeBasicView;","import Fold from \"component/Icon/Fold\";\nimport Star from \"component/Icon/Start\";\nimport Radio from \"component/Radio\";\nimport Tree from \"component/Tree\"\nimport { isArray } from \"lodash\";\nimport { ReactChild, ReactFragment, ReactPortal, useState } from \"react\";\nimport styles from './index.less'\n\nconst getData = {\n    '1-0': [\n        {\n            id: '1-0-1',\n            array: [\n                {\n                    id: '1-0-1-1',\n                    array: undefined,\n                },\n            ],\n        },\n        {\n            id: '1-0-2',\n            array: undefined,\n        },\n        {\n            id: '1-0-3',\n            array: undefined,\n        },\n    ],\n    '1-1': [\n        {\n            id: '1-1-1',\n            array: [\n                {\n                    id: '1-1-1-1',\n                    array: undefined,\n                },\n            ],\n        },\n        {\n            id: '1-1-2',\n            array: undefined,\n        },\n        {\n            id: '1-1-3',\n            array: undefined,\n        },\n    ],\n    '1-2': [\n        {\n            id: '1-2-1',\n            array: [\n                {\n                    id: '1-2-1-1',\n                    array: undefined,\n                },\n            ],\n        },\n        {\n            id: '1-2-2',\n            array: undefined,\n        },\n        {\n            id: '1-2-3',\n            array: undefined,\n        },\n    ],\n} as any;\nconst mockData = [\n    {\n        id: '1-0',\n        array: []\n    },\n\n    {\n        id: '1-1',\n        array: []\n\n    },\n\n    {\n        id: '1-2',\n        array: []\n\n    },\n];\n\nconst traveData = (node: any, cb: any) => {\n    if (node) {\n        let task = [...node];\n        while (task.length) {\n            const item = task.pop();\n            if (item) {\n                cb(item);\n                if (item.array && item.array.length) {\n                    task = task.concat([...item.array]);\n                }\n            }\n        }\n\n    }\n\n}\nconst TreeLoadView = () => {\n    const [checkedItems, setCheckedItems] = useState([]);\n    const [loadedKeys, setLoadedKeys] = useState<string[]>([]);\n    const [data, setData] = useState(mockData)\n    const nodeProps = ((item: any) => ({\n        key: item.id,\n        children: item.array,\n        isChecked: checkedItems.some((i: any) => i.id === item.id),\n        isLoaded: loadedKeys.includes(item.id),\n    }));\n    const onLoad = (item: any) => {\n        setTimeout(() => {\n            traveData(data, (n: any) => {\n                if(n.id === item.id) {\n                    const array = getData[n.id];\n                    if(array) {\n                        n.array = array;\n                    }\n                    setLoadedKeys((old) => old.concat(item.id));\n                }\n               \n            })\n\n            setData([...data]);\n            // setLoadedKeys(item.id)\n        }, 300);\n\n    }\n    return (\n        <div>\n            <div className={styles.container}>\n                <div className={styles.row}>\n                    <Tree\n                        data={data}\n                        isMulti={true}\n                        type='parent'\n                        nodeProps={nodeProps}\n                        renderNode={(item: { value: { id: boolean | ReactChild | ReactFragment | ReactPortal | null | undefined; array: any; }; }) => ({\n                            content: <span className={styles.content}>{item.value.id}</span>,\n                            icon: item.value.array ? <Fold className={styles.folder} /> : <Star className={styles.star} />,\n                        })}\n                        onCheck={setCheckedItems}\n                        onLoad={onLoad}\n                    />\n                </div>\n                <div className={styles.row}>\n                    <p>已选节点：</p>\n                    {checkedItems.map((item: any) => <p key={item.id}>{item.id}</p>)}\n                </div>\n\n            </div>\n        </div>\n    )\n\n\n}\n\nexport default TreeLoadView;","/* eslint-disable import/no-webpack-loader-syntax */\nimport classNames from \"classnames\";\nimport Demo from \"component/Demo\";\nimport Text from \"component/Text\";\nimport TreeCheckboxView from \"./TreeCheckboxView\";\nimport TreeCheckboxViewTsx from \"!!raw-loader!./TreeCheckboxView/index.tsx\";\nimport TreeCheckboxViewLess from \"!!raw-loader!./TreeCheckboxView/index.less\";\nimport TreeSingleView from \"./TreeSingleView\";\nimport TreeSingleViewTsx from \"!!raw-loader!./TreeSingleView/index.tsx\";\nimport TreeSingleViewLess from \"!!raw-loader!./TreeSingleView/index.less\";\nimport TreeBasicView from \"./TreeBasicView\";\nimport TreeBasicViewTsx from \"!!raw-loader!./TreeBasicView/index.tsx\";\nimport TreeBasicViewLess from \"!!raw-loader!./TreeBasicView/index.less\";\nimport TreeLoadView from \"./TreeLoadView\";\nimport TreeLoadViewTsx from \"!!raw-loader!./TreeLoadView/index.tsx\";\nimport TreeLoadViewLess from \"!!raw-loader!./TreeLoadView/index.less\";\nimport PropsTable from \"component/PropsTable\";\nconst TreeView = () => {\n    return (\n        <div>\n            <Text level=\"h1\">树形控件</Text>\n            <Text style={{ margin: '20px 0px' }}>文件夹、组织架构、生物分类、国家地区等等，世间万物的大多数结构都是树形结构。使用树控件可以完整展现其中的层级关系，并具有展开收起选择等交互功能。\n            </Text>\n            <section>\n                <Demo\n                    title=\"树形控件的基本使用\"\n                    demo={<TreeBasicView />}\n                    codes={\n                        [\n                            {\n                                name: 'index.ts',\n                                type: 'tsx',\n                                code: TreeBasicViewTsx\n                            },\n                            {\n                                name: 'index.less',\n                                type: 'less',\n                                code: TreeBasicViewLess\n                            }\n                        ]\n                    }\n                ></Demo>\n            </section>\n\n            <section>\n                <Demo\n                    title=\"树形控件的单选功能\n                  \"\n                    demo={<TreeSingleView />}\n                    codes={\n                        [\n                            {\n                                name: 'index.tsx',\n                                type: 'tsx',\n                                code: TreeSingleViewTsx\n                            },\n                            {\n                                name: 'index.less',\n                                type: 'less',\n                                code: TreeSingleViewLess\n                            }\n                        ]\n                    }\n                />\n            </section>\n\n            <section>\n                <Demo\n                    title=\"树形控件的多选功能\"\n                    demo={<TreeCheckboxView />}\n                    codes={\n                        [\n                            {\n                                name: 'index.ts',\n                                type: 'tsx',\n                                code: TreeCheckboxViewTsx\n                            },\n                            {\n                                name: 'index.less',\n                                type: 'less',\n                                code: TreeCheckboxViewLess\n                            }\n                        ]\n                    }\n                ></Demo>\n            </section>\n            <section>\n                <Demo\n                    title=\"树形控件的异步加载功能\"\n                    demo={<TreeLoadView />}\n                    codes={[\n\n                        {\n                            name: 'index.ts',\n                            type: 'tsx',\n                            code: TreeLoadViewTsx\n                        },\n                        {\n                            name: 'index.less',\n                            type: 'less',\n                            code: TreeLoadViewLess\n                        }\n\n                    ]}\n                />\n            </section>\n            <section>\n                \n\n            <PropsTable\n            title=\"Tree\"\n            desc=\"树形控件，基于虚拟列表技术\"\n            list={[\n                {\n                    name: 'data',\n                    desc: '必选，数据源，以下属性的泛型T为此数据源项类型',\n                    type: 'T[]',\n                    defValue: '-',\n                },\n                {\n                    name: 'nodeProps',\n                    desc: '必选，提供节点辅助数据,,注意保持引用，以免性能问题',\n                    type: ['(node:T)=>({',\n                        '//节点key用于唯一指定',\n                        'key:string, ',\n                        '//节点的子节点,空数组指此节点有子节点，',\n                        '//undefined 指此节点是叶子节点',\n                        'children?:T[] ,',\n                        '//此节点是否禁用选中，多选模式下使用',\n                        'isDisabled?:boolean, ',\n                        '//此节点的子节点是否已加载完成，',\n                        '//配合异步加载功能使用',\n                        'isLoaded?:boolean,',\n                        '//此节点是否被选中',\n                        'isChecked?:boolean,})',\n                    ].join('\\n'),\n                    defValue: '-',\n                },\n                {\n                    name: 'renderNode',\n                    desc: '必选，自定义渲染节点',\n                    type: ['(node:T)=>({',\n                        '//节点图标',\n                        'icon?:ReactElement',\n                        '//节点内容',\n                        'content:ReactElement,})'].join('\\n'),\n                    defValue: '-',\n                },\n                {\n                    name: 'type',\n                    desc: '可选，节点选择模式，多选功能下可用，parent：选择节点会向上折叠上报，leaf：只选中子节点',\n                    type: [ 'parent', 'leaf'],\n                    defValue: 'leaf',\n                },\n                // {\n                //     name: 'rowHeight',\n                //     desc: '可选，行高',\n                //     type: 'number',\n                //     defValue: '32',\n                // },\n                // {\n                //     name: 'rowClassName',\n                //     desc: '可选，行样式',\n                //     type: 'string',\n                //     defValue: 'undefined',\n                // },\n                // {\n                //     name: 'onRowClick',\n                //     desc: '可选，节点空余位置点击回调，空余位置指展开按钮，选中按钮之外的位置,toggleExpand:切换展开，toggleCheck:切换选中，会调用onCheck',\n                //     type: '(node:T,\\ntoggleExpand:()=>void,\\ntoggleCheck:()=>void)=>void',\n                //     defValue: 'undefined',\n                // },\n                {\n                    name: 'onCheck',\n                    desc: '可选，选中的回调',\n                    type: '(node:T[])=>void',\n                    defValue: 'undefined',\n                },\n                {\n                    name: 'onLoad',\n                    desc: '可选，加载节点数据回调，设置后点击展开时会回调获取数据，与nodeProps中isLoaded，children搭配使用',\n                    type: '(node:T)=>void',\n                    defValue: 'undefined',\n                },\n                // {\n                //     name: 'initialExpandAll',\n                //     desc: '可选，是否展开全部节点，建议设置为常量，变更后会重新展开全部',\n                //     type: 'boolean',\n                //     defValue: 'false',\n                // },\n                {\n                    name: 'isMulti',\n                    desc: '可选，是否多选',\n                    type: 'boolean',\n                    defValue: 'true',\n                },\n                {\n                    name: 'loading',\n                    desc: '可选，是否展示全数据加载loading',\n                    type: 'boolean',\n                    defValue: 'false',\n                }, \n                // {\n                //     name: 'empty',\n                //     desc: '可选，数据为空时的显示',\n                //     type: 'ReactElement',\n                //     defValue: '<Empty />',\n                // },\n                {\n                    name: 'className',\n                    desc: '可选，Tree的样式，需要通过样式设置Tree大小（flex或width）',\n                    type: 'string',\n                    defValue: 'undefined',\n                },\n                // {\n                //     name: 'style',\n                //     desc: '可选，Tree的样式',\n                //     type: 'CSSProperties',\n                //     defValue: 'undefined',\n                // },\n            ]}\n        />\n            </section>\n        </div>\n        // <Tree />\n    )\n\n}\n\nexport default TreeView;","export default \"import Fold from \\\"component/Icon/Fold\\\";\\nimport Star from \\\"component/Icon/Start\\\";\\nimport Tree from \\\"component/Tree\\\"\\nimport { ReactChild, ReactFragment, ReactPortal } from \\\"react\\\";\\nimport styles from './index.less'\\nconst data = [\\n    {\\n        id: '1-0',\\n        array: [\\n            {\\n                id: '1-0-1',\\n                array: [\\n                    {\\n                        id: '1-0-1-1',\\n                        array: undefined,\\n                    },\\n                ],\\n            },\\n            {\\n                id: '1-0-2',\\n                array: undefined,\\n            },\\n            {\\n                id: '1-0-3',\\n                array: undefined,\\n            },\\n        ],\\n\\n    },\\n\\n    {\\n        id: '1-1',\\n        array: [\\n            {\\n                id: '1-1-1',\\n                array: [\\n                    {\\n                        id: '1-1-1-1',\\n                        array: undefined,\\n                    },\\n                ],\\n            },\\n            {\\n                id: '1-1-2',\\n                array: undefined,\\n            },\\n            {\\n                id: '1-1-3',\\n                array: undefined,\\n            },\\n        ],\\n\\n    },\\n\\n    {\\n        id: '1-2',\\n        array: [\\n            {\\n                id: '1-2-1',\\n                array: [\\n                    {\\n                        id: '1-2-1-1',\\n                        array: undefined,\\n                    },\\n                ],\\n            },\\n            {\\n                id: '1-2-2',\\n                array: undefined,\\n            },\\n            {\\n                id: '1-2-3',\\n                array: undefined,\\n            },\\n        ],\\n\\n    },\\n];\\nconst TreeBasicView = () => {\\n\\n    const nodeProps = ((item: any) => ({\\n        key: item.id,\\n        children: item.array,\\n        // isChecked: [].some((i: any) => i.id === item.id),\\n    }));\\n    return (\\n        <div className={styles.container}>\\n            <div className={styles.row}>\\n            <Tree\\n                data={data}\\n                isMulti={true}\\n                nodeProps={nodeProps}\\n                renderNode={(item: { value: { id: boolean | ReactChild | ReactFragment | ReactPortal | null | undefined; array: any; }; }) => ({\\n                    content: <span className={styles.content}>{item.value.id}</span>,\\n                    icon: item.value.array ? <Fold className={styles.folder} /> : <Star className={styles.star} />,\\n                })}\\n            />\\n            </div>\\n            <div className={styles.row}>\\n            <Tree\\n                data={data}\\n                isMulti={false}\\n                nodeProps={nodeProps}\\n                renderNode={(item: { value: { id: boolean | ReactChild | ReactFragment | ReactPortal | null | undefined; array: any; }; }) => ({\\n                    content: <span className={styles.content}>{item.value.id}</span>,\\n                })}\\n            />\\n            </div>\\n            \\n        </div>\\n    )\\n\\n\\n}\\n\\nexport default TreeBasicView;\";","export default \".star {\\n    fill: #fa6300;\\n    height: 14px;\\n    width: 14px;\\n    margin-right: 4px;\\n}\\n\\n.container {\\n    display: flex;\\n    // width: 500px;\\n}\\n\\n.row {\\n    flex: 1;\\n    padding: 0 20px;\\n    &:first-child {\\n\\n        border-right: 1px solid #ccc;\\n    }\\n}\";","export default \"import Fold from \\\"component/Icon/Fold\\\";\\nimport Star from \\\"component/Icon/Start\\\";\\nimport Tree from \\\"component/Tree\\\"\\nimport { ReactChild, ReactFragment, ReactPortal, useState } from \\\"react\\\";\\nimport styles from './index.less'\\nconst data = [\\n    {\\n        id: '1-0',\\n        array: [\\n            {\\n                id: '1-0-1',\\n                array: [\\n                    {\\n                        id: '1-0-1-1',\\n                        array: undefined,\\n                    },\\n                ],\\n            },\\n            {\\n                id: '1-0-2',\\n                array: undefined,\\n            },\\n            {\\n                id: '1-0-3',\\n                array: undefined,\\n            },\\n        ],\\n\\n    },\\n\\n    {\\n        id: '1-1',\\n        array: [\\n            {\\n                id: '1-1-1',\\n                array: [\\n                    {\\n                        id: '1-1-1-1',\\n                        array: undefined,\\n                    },\\n                ],\\n            },\\n            {\\n                id: '1-1-2',\\n                array: undefined,\\n            },\\n            {\\n                id: '1-1-3',\\n                array: undefined,\\n            },\\n        ],\\n\\n    },\\n\\n    {\\n        id: '1-2',\\n        array: [\\n            {\\n                id: '1-2-1',\\n                array: [\\n                    {\\n                        id: '1-2-1-1',\\n                        array: undefined,\\n                    },\\n                ],\\n            },\\n            {\\n                id: '1-2-2',\\n                array: undefined,\\n            },\\n            {\\n                id: '1-2-3',\\n                array: undefined,\\n            },\\n        ],\\n\\n    },\\n];\\nconst TreeSingleView = () => {\\n    const [checkedItems, setCheckedItems] = useState([]);\\n    const nodeProps = ((item: any) => ({\\n        key: item.id,\\n        children: item.array,\\n        isChecked: checkedItems.some((i: any) => i.id === item.id),\\n    }));\\n    // console.log(checkedItems,'checkedItems');\\n    \\n    return (\\n        <div className={styles.container}>\\n            <div className={styles.row}>\\n                <Tree\\n                    data={data}\\n                    isMulti={false}\\n                    nodeProps={nodeProps}\\n                    renderNode={(item: { value: { id: boolean | ReactChild | ReactFragment | ReactPortal | null | undefined; array: any; }; }) => ({\\n                        content: <span className={styles.content}>{item.value.id}</span>,\\n                        icon: item.value.array ? <Fold className={styles.folder} /> : <Star className={styles.star} />,\\n                    })}\\n                    onCheck={setCheckedItems}\\n                />\\n            </div>\\n            <div className={styles.row}>\\n                <p>已选节点：</p>\\n                {checkedItems.map((item: any) => <p key={item.id}>{item.id}</p>)}\\n            </div>\\n\\n        </div>\\n    )\\n\\n\\n}\\n\\nexport default TreeSingleView;\";","export default \".star {\\n    fill: #fa6300;\\n    height: 14px;\\n    width: 14px;\\n    margin-right: 4px;\\n}\\n\\n.container {\\n    display: flex;\\n    // width: 500px;\\n}\\n\\n.row {\\n    flex: 1;\\n    padding: 0 20px;\\n    &:first-child {\\n\\n        border-right: 1px solid #ccc;\\n    }\\n}\";","export default \"import Fold from \\\"component/Icon/Fold\\\";\\nimport Star from \\\"component/Icon/Start\\\";\\nimport Radio from \\\"component/Radio\\\";\\nimport Tree from \\\"component/Tree\\\"\\nimport { ReactChild, ReactFragment, ReactPortal, useState } from \\\"react\\\";\\nimport styles from './index.less'\\nconst data = [\\n    {\\n        id: '1-0',\\n        array: [\\n            {\\n                id: '1-0-1',\\n                array: [\\n                    {\\n                        id: '1-0-1-1',\\n                        array: undefined,\\n                    },\\n                ],\\n            },\\n            {\\n                id: '1-0-2',\\n                array: undefined,\\n            },\\n            {\\n                id: '1-0-3',\\n                array: undefined,\\n            },\\n        ],\\n\\n    },\\n\\n    {\\n        id: '1-1',\\n        array: [\\n            {\\n                id: '1-1-1',\\n                array: [\\n                    {\\n                        id: '1-1-1-1',\\n                        array: undefined,\\n                    },\\n                ],\\n            },\\n            {\\n                id: '1-1-2',\\n                array: undefined,\\n            },\\n            {\\n                id: '1-1-3',\\n                array: undefined,\\n            },\\n        ],\\n\\n    },\\n\\n    {\\n        id: '1-2',\\n        array: [\\n            {\\n                id: '1-2-1',\\n                array: [\\n                    {\\n                        id: '1-2-1-1',\\n                        array: undefined,\\n                    },\\n                ],\\n            },\\n            {\\n                id: '1-2-2',\\n                array: undefined,\\n            },\\n            {\\n                id: '1-2-3',\\n                array: undefined,\\n            },\\n        ],\\n\\n    },\\n];\\n\\nconst options = [\\n    { key: 'leaf', content: '只选择叶子节点', className: styles.radio },\\n    { key: 'parent', content: '合并选项', className: styles.radio },\\n    \\n]\\nconst TreeCheckboxView = () => {\\n    const [checkedItems, setCheckedItems] = useState([]);\\n    const [key,setKey] = useState('leaf');\\n    \\n    const nodeProps = ((item: any) => ({\\n        key: item.id,\\n        children: item.array,\\n        isChecked: checkedItems.some((i: any) => i.id === item.id),\\n    }));\\n    return (\\n        <div>\\n            <div className={styles.radio}>\\n                <Radio\\n                    options={options}\\n                    selectedKey={key}\\n                    onSelect={(selectedKey:string) => {\\n                        setKey(selectedKey)\\n                        setCheckedItems([])\\n                    }}\\n                />\\n            </div>\\n            <div className={styles.container}>\\n                <div className={styles.row}>\\n                    <Tree\\n                        data={data}\\n                        isMulti={true}\\n                        type={key}\\n                        nodeProps={nodeProps}\\n                        renderNode={(item: { value: { id: boolean | ReactChild | ReactFragment | ReactPortal | null | undefined; array: any; }; }) => ({\\n                            content: <span className={styles.content}>{item.value.id}</span>,\\n                            icon: item.value.array ? <Fold className={styles.folder} /> : <Star className={styles.star} />,\\n                        })}\\n                        onCheck={setCheckedItems}\\n                    />\\n                </div>\\n                <div className={styles.row}>\\n                    <p>已选节点：</p>\\n                    {checkedItems.map((item: any) => <p key={item.id}>{item.id}</p>)}\\n                </div>\\n\\n            </div>\\n        </div>\\n    )\\n\\n\\n}\\n\\nexport default TreeCheckboxView;\";","export default \".star {\\n    fill: #fa6300;\\n    height: 14px;\\n    width: 14px;\\n    margin-right: 4px;\\n}\\n\\n.container {\\n    display: flex;\\n    // width: 500px;\\n}\\n\\n.row {\\n    flex: 1;\\n    padding: 0 20px;\\n    &:first-child {\\n\\n        border-right: 1px solid #ccc;\\n    }\\n}\\n.radio {\\n    padding: 10px;\\n}\";","export default \"import Fold from \\\"component/Icon/Fold\\\";\\nimport Star from \\\"component/Icon/Start\\\";\\nimport Radio from \\\"component/Radio\\\";\\nimport Tree from \\\"component/Tree\\\"\\nimport { isArray } from \\\"lodash\\\";\\nimport { ReactChild, ReactFragment, ReactPortal, useState } from \\\"react\\\";\\nimport styles from './index.less'\\n\\nconst getData = {\\n    '1-0': [\\n        {\\n            id: '1-0-1',\\n            array: [\\n                {\\n                    id: '1-0-1-1',\\n                    array: undefined,\\n                },\\n            ],\\n        },\\n        {\\n            id: '1-0-2',\\n            array: undefined,\\n        },\\n        {\\n            id: '1-0-3',\\n            array: undefined,\\n        },\\n    ],\\n    '1-1': [\\n        {\\n            id: '1-1-1',\\n            array: [\\n                {\\n                    id: '1-1-1-1',\\n                    array: undefined,\\n                },\\n            ],\\n        },\\n        {\\n            id: '1-1-2',\\n            array: undefined,\\n        },\\n        {\\n            id: '1-1-3',\\n            array: undefined,\\n        },\\n    ],\\n    '1-2': [\\n        {\\n            id: '1-2-1',\\n            array: [\\n                {\\n                    id: '1-2-1-1',\\n                    array: undefined,\\n                },\\n            ],\\n        },\\n        {\\n            id: '1-2-2',\\n            array: undefined,\\n        },\\n        {\\n            id: '1-2-3',\\n            array: undefined,\\n        },\\n    ],\\n} as any;\\nconst mockData = [\\n    {\\n        id: '1-0',\\n        array: []\\n    },\\n\\n    {\\n        id: '1-1',\\n        array: []\\n\\n    },\\n\\n    {\\n        id: '1-2',\\n        array: []\\n\\n    },\\n];\\n\\nconst traveData = (node: any, cb: any) => {\\n    if (node) {\\n        let task = [...node];\\n        while (task.length) {\\n            const item = task.pop();\\n            if (item) {\\n                cb(item);\\n                if (item.array && item.array.length) {\\n                    task = task.concat([...item.array]);\\n                }\\n            }\\n        }\\n\\n    }\\n\\n}\\nconst TreeLoadView = () => {\\n    const [checkedItems, setCheckedItems] = useState([]);\\n    const [loadedKeys, setLoadedKeys] = useState<string[]>([]);\\n    const [data, setData] = useState(mockData)\\n    const nodeProps = ((item: any) => ({\\n        key: item.id,\\n        children: item.array,\\n        isChecked: checkedItems.some((i: any) => i.id === item.id),\\n        isLoaded: loadedKeys.includes(item.id),\\n    }));\\n    const onLoad = (item: any) => {\\n        setTimeout(() => {\\n            traveData(data, (n: any) => {\\n                if(n.id === item.id) {\\n                    const array = getData[n.id];\\n                    if(array) {\\n                        n.array = array;\\n                    }\\n                    setLoadedKeys((old) => old.concat(item.id));\\n                }\\n               \\n            })\\n\\n            setData([...data]);\\n            // setLoadedKeys(item.id)\\n        }, 300);\\n\\n    }\\n    return (\\n        <div>\\n            <div className={styles.container}>\\n                <div className={styles.row}>\\n                    <Tree\\n                        data={data}\\n                        isMulti={true}\\n                        type='parent'\\n                        nodeProps={nodeProps}\\n                        renderNode={(item: { value: { id: boolean | ReactChild | ReactFragment | ReactPortal | null | undefined; array: any; }; }) => ({\\n                            content: <span className={styles.content}>{item.value.id}</span>,\\n                            icon: item.value.array ? <Fold className={styles.folder} /> : <Star className={styles.star} />,\\n                        })}\\n                        onCheck={setCheckedItems}\\n                        onLoad={onLoad}\\n                    />\\n                </div>\\n                <div className={styles.row}>\\n                    <p>已选节点：</p>\\n                    {checkedItems.map((item: any) => <p key={item.id}>{item.id}</p>)}\\n                </div>\\n\\n            </div>\\n        </div>\\n    )\\n\\n\\n}\\n\\nexport default TreeLoadView;\";","export default \".star {\\n    fill: #fa6300;\\n    height: 14px;\\n    width: 14px;\\n    margin-right: 4px;\\n}\\n\\n.container {\\n    display: flex;\\n    // width: 500px;\\n}\\n\\n.row {\\n    flex: 1;\\n    padding: 0 20px;\\n    &:first-child {\\n\\n        border-right: 1px solid #ccc;\\n    }\\n}\\n.radio {\\n    padding: 10px;\\n}\";","interface Props {\n    className?: string;\n}\n\nconst Fold = (props: Props) => {\n\n    const { className } = props;\n\n    return (\n        <svg\n            id=\"icon-folder-filled-14\"\n            viewBox=\"0 0 1024 1024\" width=\"12px\" height=\"12px\"\n            className={className}>\n            <path d=\"M0 146.285714h486.4l107.52 166.546286H1024V950.857143H0z\"></path>\n        </svg>\n    )\n}\n\nexport default Fold;","\n\ninterface Props {\n    className?: string;\n}\n\nconst Star = (props: Props) => {\n    const { className } = props;\n    return (\n        <svg\n            id=\"icon-star\" viewBox=\"0 0 1024 1024\"\n            width=\"12px\"\n            height=\"12px\" className={className}>\n            <path d=\"M512 812.8c6.4 0 12.864 1.472 18.752 4.608l297.664 156.48-56.832-331.52a40.32 40.32 0 0 1 11.584-35.648L1024 371.968l-332.8-48.32a40.32 40.32 0 0 1-30.336-22.08L512 0 363.136 301.568a40.32 40.32 0 0 1-30.336 22.08L0 371.968 240.832 606.72a40.32 40.32 0 0 1 11.584 35.712l-56.832 331.456 297.664-156.48A40.32 40.32 0 0 1 512 812.736z\"></path>\n        </svg>\n    )\n}\n\nexport default Star;","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","interface Props {\n    className?: string;\n}\n\n\nconst Left = (props: Props) => {\n\n    const { className } = props;\n\n    return (\n        <svg\n            id=\"icon-right-arrow-filled-6\" viewBox=\"0 0 1024 1024\" width=\"12px\" height=\"12px\" className={className}>\n            <path d=\"M938.666667 512l-853.333334-512v1024z\">\n            </path>\n        </svg>\n    )\n}\n\nexport default Left;","import classNames from \"classnames\";\nimport CheckBox from \"component/CheckBox\";\nimport Fold from \"component/Icon/Fold\";\nimport Left from \"component/Icon/Left\";\nimport Star from \"component/Icon/Start\";\nimport List from \"component/List\";\nimport Loading from \"component/Loading\";\nimport { isArray } from \"lodash\";\nimport { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport styles from './index.less'\n\n\n\nconst travel = (node: any, cb: any) => {\n    cb(node);\n    if (node.child) {\n        travel(node.child, cb)\n    }\n\n    if (node.next) {\n        travel(node.next, cb)\n    }\n}\n\nconst travelParent = (node: { parent: any; }, cb: { (n: any): void; (arg0: any): void; }) => {\n    cb(node);\n    if (node.parent) {\n        travelParent(node.parent, cb)\n    }\n}\n\nconst getParentSelect = (node: any, fn: any) => {\n    if (node.isChecked) {\n        fn(node)\n        node.next && getParentSelect(node.next, fn)\n    } else {\n        node.child && getParentSelect(node.child, fn);\n        node.next && getParentSelect(node.next, fn)\n    }\n}\nconst getLeafSelect = (node: any, fn: any) => {\n    if (!node.canExpand && node.isChecked) {\n        fn(node);\n    }\n    node.child && getLeafSelect(node.child, fn);\n    node.next && getLeafSelect(node.next, fn)\n}\n\nconst Tree = (props: any) => {\n    const { \n        data, isMulti, type = 'leaf', \n        nodeProps, \n        renderNode, \n        onCheck,\n        onLoad,\n        className,\n    } = props;\n    const lastRootNodeRef = useRef();\n    const [list, setList] = useState([])\n    const rootNode = useMemo(() => {\n        if (data.length <= 0) {\n            return undefined;\n        }\n\n        const createNode = (\n            nodeData: any,\n            lastNode?: any,\n            parent?: any,\n            level = 0,\n        ) => {\n            const {\n                children, key, isChecked = false, isDisabled = false,\n                isLoaded = true,\n            } = nodeProps(nodeData) as any;\n\n            //加上🇺每个node 的状态 跟 parent\n            const node = {\n                value: nodeData,\n                key,\n                level,\n                isExpand: false,\n                canExpand: children !== undefined,\n                isLoaded, // 是否已经假装数据\n                isChecked,\n                isDisabled,\n                isIndeterminate: false,\n                loading: false,\n                parent, // 第一次递归是空，第二次就带上上次的节点\n            } as any;\n            // 因为每次 loading 都是false \n            // 不知道为什么 上次 什么逻辑  这里是为了记录 loading， 是否加载完成，未来就是true\n            if (lastNode && lastNode.key === node.key) {\n                node.isExpand = lastNode.isExpand;\n                if (node.isLoaded === false) {\n                    node.loading = lastNode.loading;\n                }\n            }\n\n            // 父级选中  子级选中  如果它的父级北选中 ，则当前孩子选中\n            if (parent && parent.isChecked) {\n                node.isChecked = true;\n            }\n            // 有孩子数据继续创建\n            if (isArray(children) && children.length > 0) {\n\n                let cNode: any;\n                let lastCNode = lastNode ? lastNode.child : undefined;\n                let checkedChildCount = 0; // 子孩子是否全部选中\n                for (let i = 0; i < children.length; i += 1) {\n\n                    // 递归创建子级\n                    const thisNode = createNode(children[i], lastCNode, node, level + 1);\n                    // 最后一个孩子\n\n                    // 第二次呢 回来的时候 cNode 已经被复制  回到第二个的时候 \n                    if (cNode === undefined) {\n                        cNode = thisNode;\n                        node.child = cNode;\n                    } else {\n                        cNode.next = thisNode;\n                        cNode = thisNode;\n                    }\n\n                    lastCNode = lastCNode ? lastCNode.next : undefined;\n                    // 如何当前元素是选中的\n                    if (cNode.isChecked) {\n                        node.isIndeterminate = true;\n                        checkedChildCount += 1;\n                    }\n                    // 向上的都 变\n                    if (node.isIndeterminate && node.parent) {\n                        travelParent(node.parent, (n: any) => {\n                            n.isIndeterminate = true;\n                        })\n                    }\n\n                    // 看子级是否选中\n                    if (checkedChildCount === children.length) {\n                        node.isChecked = true;\n                    } \n\n                    // 不能要\n                    // else {\n                    //     node.isChecked = false\n                    // }\n                }\n            }\n            return node;\n        }\n        let lastCurrent = lastRootNodeRef.current as any;\n\n        let root = createNode(data[0], lastCurrent);\n\n        let current = root;\n        for (let i = 1; i < data.length; i++) {\n            const item = data[i];\n            if (item) {\n                lastCurrent = lastCurrent ? lastCurrent.next : undefined;\n                current.next = createNode(item, lastCurrent)\n                current = current.next;\n            }\n        }\n        lastRootNodeRef.current = root;\n\n        return root;\n    }, [nodeProps])\n\n    const createList = () => {\n        if (rootNode) {\n            const result = [] as any;\n            travel(rootNode, (node: { parent: { isExpand: any; }; }) => {\n                if (!node.parent || (node.parent && node.parent.isExpand)) {\n                    result.push(node)\n                }\n            })\n            setList(result)\n        }\n    }\n\n    useEffect(() => {\n\n        createList()\n    }, [rootNode]);\n\n    const handleCheck = (checkedNode: any, checked: boolean) => {\n        checkedNode.isChecked = checked;\n        if (!isMulti && onCheck) {\n            onCheck([checkedNode.value])\n            return;\n        }\n        // checkedNode.isChecked = checked;\n        if (checkedNode.child) {\n            travel(checkedNode.child, (n: any) => {\n                n.isChecked = checked\n            })\n        }\n        if (checkedNode.parent && !checked) {\n            travelParent(checkedNode.parent, (n: any) => {\n                n.isChecked = false\n            })\n        }\n        // 为真的时候\n        if (checkedNode.parent && checked) {\n            travelParent(checkedNode.parent, (node: any) => {\n                let { child } = node as any;\n                let allParent = true;\n                while (child) {\n                    allParent = child.isChecked && allParent;\n                    if (!child.isChecked) break;\n                    child = child.next;\n                }\n                node.isChecked = allParent\n            })\n        }\n\n        // 选中的元素\n        const res = [] as any;\n        const root = rootNode;\n        if (type === 'leaf') {\n            getLeafSelect(root, (n: any) => {\n                res.push(n)\n            })\n        } else {\n            getParentSelect(root, (n: any) => {\n                res.push(n)\n            })\n        }\n        // console.log(res, 'res', type)\n        if (onCheck) { \n            onCheck([...res].map(item => item.value))\n        }\n\n        createList();\n    }\n\n    const renderItem = (index: number) => {\n\n        const item = list[index] as any;\n        const result = renderNode(item);\n        let icon;\n        if (item.child && result.icon) {\n            icon = (\n                <span className={styles.placeholder}>\n                    {result.icon}\n                </span>\n            );\n        } else if (item.child === undefined) {\n            icon = (\n                <span className={styles.placeholder}>\n                    {result.icon}\n                </span>\n            );\n        }\n        const toggleExpand = (e?: any) => {\n            // 是子节点 \n            if (item.canExpand === false || item.loading) {\n                return;\n            }\n            if (item.isExpand) {\n                item.isExpand = false;\n                if (item.child) {\n                    travel(item.child, (n: any) => {\n                        n.isExpand = false\n                    })\n                }\n            } else {\n                if (onLoad && item.isLoaded === false) { // 加载模式下时启动加载\n                    item.loading = true;\n                    onLoad(item.value);\n                }\n                item.isExpand = true;\n            }\n            if (e) {\n                e.stopPropagation();\n            }\n            createList();\n        }\n        const toggleCheck = (e: { stopPropagation: () => void; }) => {\n            const checked = !item.isChecked;\n            handleCheck(item, checked);\n            e.stopPropagation();\n            return\n        }\n        // if (isMulti) {\n        return (\n            <div\n                className={classNames(styles.row, {\n                    // [styles.active]: isActive\n                })}\n                onClick={(e) => {\n                    if (isMulti) {\n                        toggleExpand()\n                    } else {\n                        toggleCheck(e)\n                    }\n\n                }}\n                style={{ paddingLeft: item.level * 20 }}\n            >\n                {/* {\n                    item.canExpand ? <span\n                        className={styles.iconContainer}\n                        onClick={toggleExpand}\n                    >\n                        <Left className={classNames(styles.expandIcon, {\n                            [styles.rotate]: item.isExpand\n                        })} />\n                        <Fold className={styles.fold} />\n                    </span> : <Star className={styles.star} />\n                } */}\n                {\n                    item.canExpand ? <span\n                        className={styles.iconContainer}\n                        onClick={toggleExpand}\n                    >\n                        {\n                            item.loading ? <Loading className={styles.loading} /> : <Left className={classNames(styles.expandIcon, {\n                                [styles.rotate]: item.isExpand\n                            })} />\n                        }\n                       \n                    </span> : null\n                }\n                {\n                    icon\n                }\n                {result.content}\n                {/* <span> {item.value.id}</span> */}\n                {\n                    isMulti ? <span className={styles.checkbox}>\n                        <CheckBox\n                            options={undefined}\n                            checked={item.isChecked}\n                            // onChange={() => { }}\n                            // indeterminate={item.isIndeterminate}\n                            onClick={toggleCheck}\n                        />\n                    </span> : null\n                }\n\n            </div>\n        )\n\n    }\n    return (\n\n        <List list={list} render={renderItem} className={classNames(styles.listContainer, className) } />\n\n    )\n\n}\n\nexport default Tree;","\nimport classNames from 'classnames';\nimport { useState } from 'react';\nimport styles from './index.less'\n// 样式display：inline-flex label 不需要forHtml 同一个样式 a.b \n\n\nconst Radio = (props: any) => {\n    const { selectedKey, onSelect,type, options } = props;\n    return (\n        <div className={classNames({\n            [styles.vertical]: type === 'vertical'\n        })}>\n            {\n                options.map((item:any) => {\n                    return (\n                        <label className={classNames(styles.container, {\n                            [styles.active]: item.key === selectedKey,\n                            [styles.disable]: item.disabled\n                        })\n                        }\n                        key={item.key}\n                        >\n                            <input\n                                className={styles.inputRadio}\n                                type=\"radio\"\n                                disabled={item.disabled}\n                                defaultChecked={item.key === selectedKey}\n                                onClick={() => {\n                                    if(item.key !== selectedKey) {\n                                        onSelect(item.key)\n                                    }\n                                }} />\n                            <span className={styles.circle}></span>\n                            <span>{item.content}</span>\n                        </label>\n                    );\n                })\n            }\n        </div>\n    )\n}\n\nexport default Radio;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"index_container_d4d33\",\"inputRadio\":\"index_inputRadio_ca956\",\"circle\":\"index_circle_d78f6\",\"active\":\"index_active_78b71\",\"disable\":\"index_disable_2a83e\",\"vertical\":\"index_vertical_95447\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"expandIcon\":\"index_expandIcon_372d6\",\"row\":\"index_row_7a1af\",\"rotate\":\"index_rotate_77060\",\"checkbox\":\"index_checkbox_81577\",\"placeholder\":\"index_placeholder_1dbae\",\"iconContainer\":\"index_iconContainer_e55e7\",\"listContainer\":\"index_listContainer_417ec\",\"loading\":\"index_loading_efcf4\"};"],"sourceRoot":""}